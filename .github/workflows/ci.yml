# This is a basic workflow to help you get started with Actions

name: dotnet-webapi-generator

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      UserName:
        description: 'Github Username'
        required: true
        default: hack3rlife
      Email:
        description: 'Github Email'
        required: true
        default: hack3rlifeio@gamil.com
      PAT:
        description: 'Github Personal Access Token'
        required: true
      ProjectName:
        description: 'Project Name'
        required: true
        default: CleanArch
      RepoName:
        description: 'Github Repository Name (to be created)'
        required: true
        default: cleanarchitecture-webapi
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Hack3rlife.ASP.NETCore.WebAPI NuGet Package 
        run: dotnet new --install Hack3rlife.ASP.NETCore.WebAPI
        
      - name: Create Clean Architecture Template
        run: dotnet new CleanArchitectureNetCoreWebAPI -n Test -o tmp --force
       
      # Runs a set of commands using the runners shell
      - name: Create Githib Repository
        run: |
          cd tmp
          git init -b main        
          
          git config --global user.email '${{ github.event.inputs.Email }}'
          git config --global user.name '${{ github.event.inputs.UserName }}'
          
          echo * * * * * Adding files to be commited * * * * * 
          git add .
          
          echo * * * * * Initial Commit * * * * * 
          git commit -m 'Initial Commit'
          
          echo ${{ github.event.inputs.PAT }} | curl -u ${{ github.event.inputs.UserName }} https://api.github.com/user/repos -d '{"name":"${{ github.event.inputs.RepoName }}","private":false}'
          
          echo * * * * * Adding remote * * * * *
          git remote add origin https://${{ github.event.inputs.UserName }}:${{ github.event.inputs.PAT }}@github.com/${{ github.event.inputs.UserName }}/${{ github.event.inputs.RepoName }}.git
          git remote -vv
          
          echo * * * * * Pushing changes * * * * * 
          sleep 5
          git push -u origin main
          
          cd ..
          rmdir tmp -v --ignore-fail-on-non-empty
